//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace proyectoGasolinera.wsCombustibleDisponible {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wsCombustibleDisponible.wsCombustibleDisponibleSoap")]
    public interface wsCombustibleDisponibleSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Combustible_Disponible", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Combustible_Disponible();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Combustible_Disponible", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> Combustible_DisponibleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Insertar_Combustible", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Insertar_Combustible(int idTipo, int idBomba, double galonesDisponibles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Insertar_Combustible", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Insertar_CombustibleAsync(int idTipo, int idBomba, double galonesDisponibles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/actualizar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int actualizar(int idCombustible, int idTipo, int idBomba, double galonesDisponibles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/actualizar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> actualizarAsync(int idCombustible, int idTipo, int idBomba, double galonesDisponibles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/eliminar_Combustible", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int eliminar_Combustible(int idTipoCombustible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/eliminar_Combustible", ReplyAction="*")]
        System.Threading.Tasks.Task<int> eliminar_CombustibleAsync(int idTipoCombustible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/buscar_Combustible", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet buscar_Combustible(int idCombustible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/buscar_Combustible", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> buscar_CombustibleAsync(int idCombustible);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsCombustibleDisponibleSoapChannel : proyectoGasolinera.wsCombustibleDisponible.wsCombustibleDisponibleSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsCombustibleDisponibleSoapClient : System.ServiceModel.ClientBase<proyectoGasolinera.wsCombustibleDisponible.wsCombustibleDisponibleSoap>, proyectoGasolinera.wsCombustibleDisponible.wsCombustibleDisponibleSoap {
        
        public wsCombustibleDisponibleSoapClient() {
        }
        
        public wsCombustibleDisponibleSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsCombustibleDisponibleSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsCombustibleDisponibleSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsCombustibleDisponibleSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet Combustible_Disponible() {
            return base.Channel.Combustible_Disponible();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Combustible_DisponibleAsync() {
            return base.Channel.Combustible_DisponibleAsync();
        }
        
        public int Insertar_Combustible(int idTipo, int idBomba, double galonesDisponibles) {
            return base.Channel.Insertar_Combustible(idTipo, idBomba, galonesDisponibles);
        }
        
        public System.Threading.Tasks.Task<int> Insertar_CombustibleAsync(int idTipo, int idBomba, double galonesDisponibles) {
            return base.Channel.Insertar_CombustibleAsync(idTipo, idBomba, galonesDisponibles);
        }
        
        public int actualizar(int idCombustible, int idTipo, int idBomba, double galonesDisponibles) {
            return base.Channel.actualizar(idCombustible, idTipo, idBomba, galonesDisponibles);
        }
        
        public System.Threading.Tasks.Task<int> actualizarAsync(int idCombustible, int idTipo, int idBomba, double galonesDisponibles) {
            return base.Channel.actualizarAsync(idCombustible, idTipo, idBomba, galonesDisponibles);
        }
        
        public int eliminar_Combustible(int idTipoCombustible) {
            return base.Channel.eliminar_Combustible(idTipoCombustible);
        }
        
        public System.Threading.Tasks.Task<int> eliminar_CombustibleAsync(int idTipoCombustible) {
            return base.Channel.eliminar_CombustibleAsync(idTipoCombustible);
        }
        
        public System.Data.DataSet buscar_Combustible(int idCombustible) {
            return base.Channel.buscar_Combustible(idCombustible);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> buscar_CombustibleAsync(int idCombustible) {
            return base.Channel.buscar_CombustibleAsync(idCombustible);
        }
    }
}
